--[[
管理员权限服务
负责处理管理员权限验证和配置管理
只在服务器端运行，通过RemoteFunction为客户端提供权限查询服务
--]]

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")

-- 确保只在服务器端运行
if not RunService:IsServer() then
    error("AdminService 只能在服务器端运行")
end

local Config = require(ReplicatedStorage:WaitForChild("SharedModules"):WaitForChild("Config"))

local AdminService = {}

-- 管理员配置缓存
local adminCache = {
    localUsernames = {},        -- 本地配置的管理员
    lastUpdate = 0
}

--[[
从本地配置加载管理员
@return boolean - 是否成功加载
--]]
local function loadLocalAdminConfig()
    -- 从Config中获取默认管理员用户名
    adminCache.localUsernames = Config.ADMIN.DEFAULT_ADMIN_USERNAMES or {}

    Config.log("INFO", "本地管理员配置已加载", {
        usernames = adminCache.localUsernames,
        count = #adminCache.localUsernames
    })

    return true
end

-- API相关功能已删除

-- combineAdminUsernames 已删除，直接使用本地管理员配置

--[[
确保管理员配置已加载
@return boolean - 配置是否可用
--]]
local function ensureAdminConfigLoaded()
    -- 加载本地配置
    loadLocalAdminConfig()

    print("✅ [调试] 管理员配置加载完成，总计:", #adminCache.localUsernames, "个管理员")
    if #adminCache.localUsernames > 0 then
        print("📋 [调试] 管理员列表:", table.concat(adminCache.localUsernames, ", "))
    end

    return #adminCache.localUsernames > 0
end

--[[
本地检查玩家是否为管理员
@param player Player - 玩家对象
@return boolean - 是否为管理员
--]]
function AdminService.isPlayerAdminLocal(player)
    if not player or not player.Name then
        return false
    end

    -- 确保配置已加载
    if not ensureAdminConfigLoaded() then
        print("⚠️ [调试] 管理员配置未加载，无法进行本地检查")
        return false
    end

    -- 检查玩家名是否在管理员列表中
    for _, adminName in pairs(adminCache.localUsernames) do
        if player.Name == adminName then
            print("✅ [调试] 玩家", player.Name, "通过用户名匹配确认为管理员")
            return true
        end
    end

    return false
end

--[[
检查玩家是否为管理员
优先使用本地检查，避免HTTP请求阻塞RemoteFunction
@param player Player - 要检查的玩家
@return boolean - 是否为管理员
--]]
function AdminService.isPlayerAdmin(player)
    if not player or not player.UserId then
        return false
    end

    print("🔍 [调试] 检查管理员权限:", player.Name)

    -- 直接使用本地检查，避免HTTP请求阻塞
    local isLocalAdmin = AdminService.isPlayerAdminLocal(player)
    if isLocalAdmin then
        print("⚡ [调试] " .. player.Name .. " 通过本地验证确认为管理员")
        return true
    end

    print("❌ [调试] " .. player.Name .. " 不是管理员（本地检查）")
    return false
end

--[[
获取所有管理员用户名列表
@return table - 管理员用户名数组
--]]
function AdminService.getAdminUsernames()
    ensureAdminConfigLoaded()
    return adminCache.localUsernames
end

--[[
获取本地配置的管理员用户名列表
@return table - 本地管理员用户名数组
--]]
function AdminService.getLocalAdminUsernames()
    return adminCache.localUsernames or {}
end

-- API功能已删除
-- getApiAdminUsernames 已删除

--[[
手动刷新管理员配置缓存
@return boolean - 是否刷新成功
--]]
function AdminService.refreshAdminCache()
    print("🔄 [调试] 手动刷新管理员配置缓存")
    adminCache.lastUpdate = 0 -- 强制过期
    return ensureAdminConfigLoaded()
end

--[[
异步刷新管理员配置缓存（不阻塞调用）
--]]
function AdminService.refreshAdminCacheAsync(player)
    spawn(function()
        print("🔄 [调试] 异步刷新管理员配置缓存")
        AdminService.refreshAdminCache()

        -- 重新检查该玩家权限
        if player and AdminService.isPlayerAdminLocal(player) then
            print("✅ [调试] 异步更新后确认", player.Name, "为管理员")
        end
    end)
end

-- 使用Events系统进行权限查询
local Events = require(ReplicatedStorage:WaitForChild("SharedModules"):WaitForChild("ShopEvents"))

-- 处理客户端的权限查询请求
if Events.Admin.CheckPermission then
    Events.Admin.CheckPermission.OnServerInvoke = function(player)
        print("🔄 [调试] 服务端收到管理员权限查询请求:", player.Name)

        -- 优先使用本地缓存进行快速检查，完全避免HTTP请求阻塞RemoteFunction
        local success, result = pcall(function()
            -- 直接使用本地配置

            return AdminService.isPlayerAdminLocal(player)
        end)

        if success then
            print("✅ [调试] 权限查询完成:", player.Name, "结果:", result)

            -- 本地管理员配置，无需异步刷新

            return result
        else
            print("❌ [调试] 权限查询出错:", player.Name, "错误:", result)
            -- 出错时返回false，但不阻塞
            return false
        end
    end
    print("✅ [调试] AdminService CheckPermission RemoteFunction 已连接")
else
    print("❌ [调试] 警告: CheckPermission RemoteFunction 未找到")
end

-- 初始化时预加载配置
spawn(function()
    wait(2) -- 等待游戏完全加载
    print("🚀 [调试] 开始初始化 AdminService...")

    -- 首先加载本地配置
    print("📋 [调试] 加载本地管理员配置...")
    loadLocalAdminConfig()

    -- 直接使用本地配置，无API配置
    adminCache.lastUpdate = tick()

    print("✅ [调试] 管理员配置初始化完成")
    print("📊 [调试] 配置统计:")
    print("  • 管理员:", #adminCache.localUsernames, "个")

    if #adminCache.localUsernames > 0 then
        print("📋 [调试] 当前管理员列表:")
        for i, username in pairs(adminCache.localUsernames) do
            print("  " .. i .. ": " .. tostring(username))
        end
    else
        print("⚠️ [调试] 没有配置任何管理员，请在Config.ADMIN.DEFAULT_ADMIN_USERNAMES中添加管理员用户名")
    end

    print("🚀 [调试] AdminService 初始化完成")
end)

return AdminService